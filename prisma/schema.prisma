generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SyncJobStatus {
  ACTIVE
  PAUSED
}

enum SyncJobCadence {
  FIFTEEN_MINUTES
  HOURLY
  DAILY
}

enum JobRunStatus {
  PENDING
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  ownedSyncJobs SyncJob[] @relation("SyncJobOwner")
  telemetry     TelemetryEvent[]
}

model Account {
  id                        String   @id @default(uuid()) @db.Uuid
  userId                    String   @db.Uuid
  type                      String
  provider                  String
  providerAccountId         String
  email                     String?
  refresh_token             String?
  access_token              String?
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String?
  session_state             String?
  oauth_token_secret        String?
  oauth_token               String?
  refresh_token_expires_in  Int?
  calendarSyncAuthStorage   String?  // Encrypted auth-storage.yaml content (AGE encrypted)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  calendars                 Calendar[]

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Calendar {
  id                 String    @id @default(uuid()) @db.Uuid
  accountId          String    @db.Uuid
  googleCalendarId   String
  summary            String
  timeZone           String
  description        String?
  color              String?
  accessRole         String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  account            Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  sourceForJobs      SyncJob[] @relation("SourceCalendar")
  destinationForJobs SyncJob[] @relation("DestinationCalendar")

  @@unique([accountId, googleCalendarId])
}

model SyncJob {
  id                    String         @id @default(uuid()) @db.Uuid
  ownerId               String         @db.Uuid
  sourceCalendarId      String         @db.Uuid
  destinationCalendarId String         @db.Uuid
  name                  String
  status                SyncJobStatus  @default(ACTIVE)
  cadence               SyncJobCadence
  config                Json?
  lastRunAt             DateTime?
  nextRunAt             DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  owner                 User           @relation("SyncJobOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  sourceCalendar        Calendar       @relation("SourceCalendar", fields: [sourceCalendarId], references: [id])
  destinationCalendar   Calendar       @relation("DestinationCalendar", fields: [destinationCalendarId], references: [id])
  runs                  JobRun[]

  @@index([status])
  @@index([cadence])
}

model JobRun {
  id           String      @id @default(uuid()) @db.Uuid
  jobId        String      @db.Uuid
  status       JobRunStatus
  startedAt    DateTime    @default(now())
  finishedAt   DateTime?
  message      String?
  logLocation  String?
  createdAt    DateTime    @default(now())
  job          SyncJob     @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([jobId, startedAt])
}

enum TelemetryEventType {
  PAGE_VIEW
}

model TelemetryEvent {
  id        String              @id @default(uuid()) @db.Uuid
  userId    String?             @db.Uuid
  type      TelemetryEventType
  path      String
  metadata  Json?
  createdAt DateTime            @default(now())
  user      User?               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type, createdAt])
  @@index([userId, createdAt])
}
