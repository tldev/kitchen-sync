# syntax=docker/dockerfile:1

FROM node:20-slim

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y openssl curl tar zsh age && rm -rf /var/lib/apt/lists/*

# Download CalendarSync binary
ARG CALENDARSYNC_VERSION=0.10.1
ARG CALENDARSYNC_DOWNLOAD_URL
RUN set -eux; \
  download_url="${CALENDARSYNC_DOWNLOAD_URL:-https://github.com/inovex/CalendarSync/releases/download/${CALENDARSYNC_VERSION}/CalendarSync_${CALENDARSYNC_VERSION#v}_Linux_x86_64.tar.gz}"; \
  download_url="${CALENDARSYNC_DOWNLOAD_URL:-https://github.com/inovex/CalendarSync/releases/download/v${CALENDARSYNC_VERSION}/CalendarSync_${CALENDARSYNC_VERSION}_linux_amd64.tar.gz}"; \
  tmpdir="$(mktemp -d)"; \
  if curl -fL "$download_url" -o "$tmpdir/calendarsync.tar.gz" 2>/dev/null; then \
    tar -xzf "$tmpdir/calendarsync.tar.gz" -C "$tmpdir"; \
    bin_path="$(find "$tmpdir" -maxdepth 3 -type f -perm -111 | head -n 1)"; \
    if [ -n "$bin_path" ]; then \
      install -m 0755 "$bin_path" /usr/local/bin/calendarsync; \
    fi; \
  else \
    echo "Warning: Could not download CalendarSync binary from $download_url" >&2; \
    echo "Creating a stub binary for development purposes" >&2; \
    echo '#!/bin/sh' > /usr/local/bin/calendarsync; \
    echo 'echo "CalendarSync stub - binary not available"' >> /usr/local/bin/calendarsync; \
    echo 'exit 1' >> /usr/local/bin/calendarsync; \
    chmod +x /usr/local/bin/calendarsync; \
  fi; \
  rm -rf "$tmpdir"

# Copy package files for dependency installation
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm install

# Generate Prisma Client (will be regenerated on volume mount if schema changes)
COPY prisma ./prisma
RUN npx prisma generate

EXPOSE 3000

# Use dev mode with hot reloading
CMD ["npm", "run", "dev"]
